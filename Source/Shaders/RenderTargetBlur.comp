#version 450
#extension GL_KHR_vulkan_glsl : enable



////////////////////////////////////////////////////////////////
// Shader program interface.
////////////////////////////////////////////////////////////////

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Set 0: Sampler
layout(set=0, binding=0) uniform sampler				image_sampler;

// Set 1: Textures
layout(set=1, binding=0) uniform texture2D				input_image;
layout(set=1, binding=1) uniform writeonly image2D		output_image;

// Push constants.
layout(std140, push_constant) uniform PushConstants {
	uint		kernel_count;				// How many kernels we're using to determine blur.
	uint		image_size_x;				// Size of the image we're processing.
	uint		image_size_y;				// Size of the image we're processing.
} push_constants;



////////////////////////////////////////////////////////////////
// Entrypoints.
////////////////////////////////////////////////////////////////

void RenderTargetTextureBlurPass1()
{
	if( gl_GlobalInvocationID.x < push_constants.image_size_x && gl_GlobalInvocationID.y < push_constants.image_size_y ) {
		vec4 texel_color = texture( sampler2D( input_image, image_sampler ), vec2( gl_GlobalInvocationID.xy ) / vec2( push_constants.image_size_x, push_constants.image_size_y ) );
		vec4 test_color = vec4( 1.0, 0.5, 0.0, 1.0 );
		imageStore( output_image, ivec2( gl_GlobalInvocationID.xy ), texel_color );
	}
}

void RenderTargetTextureBlurPass2()
{
	if( gl_GlobalInvocationID.x < push_constants.image_size_x && gl_GlobalInvocationID.y < push_constants.image_size_y ) {
		vec4 texel_color = texture( sampler2D( input_image, image_sampler ), vec2( gl_GlobalInvocationID.xy ) / vec2( push_constants.image_size_x, push_constants.image_size_y ) );
		vec4 test_color = vec4( 1.0, 0.5, 0.0, 1.0 );
		imageStore( output_image, ivec2( gl_GlobalInvocationID.xy ), texel_color );
	}
}
