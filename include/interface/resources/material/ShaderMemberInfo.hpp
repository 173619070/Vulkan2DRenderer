#pragma once

#include <core/Common.hpp>

#include <containers/Color.hpp>

#include <string>
#include <string_view>
#include <array>



namespace vk2d {
namespace vk2d_internal {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ShaderMemberInfo
{
	std::string			type;
	std::string			name;
};



namespace detail {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
concept ShaderMemberTupleType = requires( T tuple_type )
{
	tuple_type.template Get<0>();
};



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
consteval std::string_view			GetShaderTypeString()
{
	return "";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Scalar specializations.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<bool>()
{
	return "bool";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<int32_t>()
{
	return "int";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<uint32_t>()
{
	return "uint";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<float>()
{
	return "float";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<double>()
{
	return "double";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vector specializations.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::bvec1>()
{
	return "bvec1";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::bvec2>()
{
	return "bvec2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::bvec3>()
{
	return "bvec3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::bvec4>()
{
	return "bvec4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::ivec1>()
{
	return "ivec1";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::ivec2>()
{
	return "ivec2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::ivec3>()
{
	return "ivec3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::ivec4>()
{
	return "ivec4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::uvec1>()
{
	return "uvec1";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::uvec2>()
{
	return "uvec2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::uvec3>()
{
	return "uvec3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::uvec4>()
{
	return "uvec4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::vec1>()
{
	return "vec1";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::vec2>()
{
	return "vec2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::vec3>()
{
	return "vec3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::vec4>()
{
	return "vec4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dvec1>()
{
	return "dvec1";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dvec2>()
{
	return "dvec2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dvec3>()
{
	return "dvec3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dvec4>()
{
	return "dvec4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Matrix specializations.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat2x2>()
{
	return "mat2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat2x3>()
{
	return "mat2x3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat2x4>()
{
	return "mat2x4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat3x2>()
{
	return "mat3x2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat3x3>()
{
	return "mat3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat3x4>()
{
	return "mat3x4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat4x2>()
{
	return "mat4x2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat4x3>()
{
	return "mat4x3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::mat4x4>()
{
	return "mat4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat2x2>()
{
	return "dmat2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat2x3>()
{
	return "dmat2x3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat2x4>()
{
	return "dmat2x4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat3x2>()
{
	return "dmat3x2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat3x3>()
{
	return "dmat3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat3x4>()
{
	return "dmat3x4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat4x2>()
{
	return "dmat4x2";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat4x3>()
{
	return "dmat4x3";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<glm::dmat4x4>()
{
	return "dmat4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Color specializations.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<Colorf>()
{
	return "vec4";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
consteval std::string_view			GetShaderTypeString<Colord>()
{
	return "dvec4";
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<
	size_t							Size,
	size_t							CurrentIndex,
	detail::ShaderMemberTupleType	TupleT
>
consteval void GetShaderMemberTypesAsString_Impl(
	std::array<std::string_view, TupleT::GetMemberCount()>		&	out
)
{
	if constexpr( CurrentIndex < Size )
	{
		using CurrentType = TupleT::template GetMemberType<CurrentIndex>;
		constexpr auto current_type_str = GetShaderTypeString<CurrentType>();
		static_assert( !current_type_str.empty(), "Invalid GLSL data type, please use a type that is supported by GLSL." );
		out[ CurrentIndex ] = current_type_str;

		GetShaderMemberTypesAsString_Impl<
			Size,
			CurrentIndex + 1,
			TupleT
		>( out );
	}
}



} // detail



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<detail::ShaderMemberTupleType TupleT>
consteval std::array<std::string_view, TupleT::GetMemberCount()> GetShaderMemberTypesAsString()
{
	constexpr auto tuple_member_count = TupleT::GetMemberCount();

	auto out = std::array<std::string_view, tuple_member_count>();
	detail::GetShaderMemberTypesAsString_Impl<tuple_member_count, 0, TupleT>( out );
	return out;
}



} // vk2d_internal
} // vk2d
