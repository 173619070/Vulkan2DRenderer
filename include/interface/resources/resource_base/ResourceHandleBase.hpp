#pragma once

#include <core/Common.hpp>



namespace vk2d {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename ResourceT>
class ResourceHandleBase
{
protected:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceHandleBase(
		ResourceT					*	resource_ptr
	) :
		resource_ptr( resource_ptr )
	{
		IncrementReferenceCount();
	}

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceHandleBase() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceHandleBase(
		const ResourceHandleBase	&	other
	)
	{
		CopyOther( other );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceHandleBase(
		ResourceHandleBase			&&	other
	)
	{
		MoveOther( std::move( other ) );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~ResourceHandleBase()
	{
		Clear();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceHandleBase				&	operator=(
		nullptr_t
	)
	{
		Clear();
		return *this;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceHandleBase				&	operator=(
		const ResourceHandleBase	&	other
	)
	{
		CopyOther( other );
		return *this;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceHandleBase				&	operator=(
		ResourceHandleBase			&&	other
	)
	{
		MoveOther( std::move( other ) );
		return *this;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename OtherT>
	requires( std::is_base_of_v<ResourceHandleBase, OtherT> )
	bool								operator==(
		const OtherT				&	other
	) const
	{
		return resource_ptr == other.resource_ptr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename OtherT>
	requires( std::is_base_of_v<ResourceHandleBase, OtherT> )
	bool								operator!=(
		const OtherT				&	other
	) const
	{
		return resource_ptr != other.resource_ptr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	const ResourceT					*	operator->() const
	{
		return resource_ptr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceT						*	operator->()
	{
		return resource_ptr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	const ResourceT					&	operator*() const
	{
		// TODO, throw if nullptr. Need to implement exceptions for this.
		return *resource_ptr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceT						&	operator*()
	{
		// TODO, throw if nullptr. Need to implement exceptions for this.
		return *resource_ptr;
	}

	operator bool()
	{
		return !!resource_ptr;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void								Clear()
	{
		DecrementReferenceCount();
		resource_ptr = nullptr;
	}

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void								CopyOther(
		const ResourceHandleBase	&	other
	)
	{
		if( other == *this ) return;

		DecrementReferenceCount();
		resource_ptr = other.resource_ptr;
		IncrementReferenceCount();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void								MoveOther(
		ResourceHandleBase			&&	other
	)
	{
		if( other == *this ) return;

		std::swap( resource_ptr, other.resource_ptr );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void								IncrementReferenceCount()
	{
		if( resource_ptr )
		{
			resource_ptr->IncrementReferenceCount();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void								DecrementReferenceCount()
	{
		if( resource_ptr )
		{
			resource_ptr->DecrementReferenceCount();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ResourceT						*	resource_ptr					= {};
};



} // vk2d
