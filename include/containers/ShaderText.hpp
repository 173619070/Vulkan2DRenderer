#pragma once

#include <core/Common.hpp>

#include <string>
#include <string_view>



namespace vk2d {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderText
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline ShaderText() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline ShaderText(
		std::string_view			shader_code,
		std::string_view			shader_name			= {}
	) :
		shader_name( shader_name ),
		shader_code( shader_code )
	{
		hash = std::hash<std::string> {}( this->shader_code );
		assert( std::hash<std::string_view>{}( shader_code ) == hash );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const std::string	&	GetName() const
	{
		return shader_name;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline const std::string	&	GetCode() const
	{
		return shader_code;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	inline size_t					GetHash() const
	{
		return hash;
	}

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::string						shader_name;
	std::string						shader_code;

	size_t							hash;
};



} // vk2d
