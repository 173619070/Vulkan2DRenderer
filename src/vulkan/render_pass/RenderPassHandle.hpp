#pragma once

#include <core/SourceCommon.hpp>
#include "RenderPassManagerRenderPassEntry.hpp"



namespace vk2d {
namespace vulkan {

class RenderPassManager;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class RenderPassHandle
{
	friend class RenderPassManager;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassHandle(
		RenderPassManager					*	render_pass_manager,
		RenderPassManagerRenderPassEntry	*	render_pass_entry
	);

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassHandle() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassHandle(
		const RenderPassHandle				&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassHandle(
		RenderPassHandle					&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~RenderPassHandle();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassHandle						&	operator=(
		nullptr_t
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassHandle						&	operator=(
		const RenderPassHandle				&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassHandle						&	operator=(
		RenderPassHandle					&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool										operator==(
		const RenderPassHandle				&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool										operator!=(
		const RenderPassHandle				&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkRenderPass								GetVulkanRenderPass() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t										GetHash() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void										Clear();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	operator VkRenderPass() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	operator bool() const;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void										IncrementReferenceCount();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void										DecrementReferenceCount();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void										CopyOther(
		const RenderPassHandle				&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void										MoveOther(
		RenderPassHandle					&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassManager						*	render_pass_manager				= {};
	RenderPassManagerRenderPassEntry		*	render_pass_entry				= {};
};



} // vulkan
} // vk2d
