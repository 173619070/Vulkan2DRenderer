#pragma once

#include <core/SourceCommon.hpp>

#include <types/Synchronization.hpp>



namespace vk2d {
namespace vulkan {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class RenderPassManagerRenderPassEntry
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassManagerRenderPassEntry(
		VkRenderPass										vulkan_render_pass,
		size_t												hash
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassManagerRenderPassEntry(
		const RenderPassManagerRenderPassEntry			&	other
	) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassManagerRenderPassEntry(
		RenderPassManagerRenderPassEntry				&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~RenderPassManagerRenderPassEntry();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassManagerRenderPassEntry					&	operator=(
		const RenderPassManagerRenderPassEntry			&	other
	) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	RenderPassManagerRenderPassEntry					&	operator=(
		RenderPassManagerRenderPassEntry				&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool													operator==(
		const RenderPassManagerRenderPassEntry			&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkRenderPass											GetVulkanRenderPass();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t													GetHash();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void													MoveOther(
		RenderPassManagerRenderPassEntry				&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkRenderPass											vulkan_render_pass		= {};
	size_t													hash					= {};

public:
	MutexObject<size_t>										reference_count;
};



} // vulkan
} // vk2d
