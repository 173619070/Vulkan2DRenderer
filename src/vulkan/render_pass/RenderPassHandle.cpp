
#include <core/SourceCommon.hpp>
#include "RenderPassHandle.hpp"

#include "RenderPassManager.hpp"



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle::RenderPassHandle(
	RenderPassManager					*	render_pass_manager,
	RenderPassManagerRenderPassEntry	*	render_pass_entry
) :
	render_pass_manager( render_pass_manager ),
	render_pass_entry( render_pass_entry )
{
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle::RenderPassHandle(
	const RenderPassHandle & other
)
{
	CopyOther( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle::RenderPassHandle(
	RenderPassHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle::~RenderPassHandle()
{
	Clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle & vk2d::vulkan::RenderPassHandle::operator=(
	nullptr_t
)
{
	Clear();
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle & vk2d::vulkan::RenderPassHandle::operator=(
	const RenderPassHandle & other
)
{
	CopyOther( other );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle & vk2d::vulkan::RenderPassHandle::operator=(
	RenderPassHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::RenderPassHandle::operator==(
	const RenderPassHandle & other
) noexcept
{
	return render_pass_entry == other.render_pass_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::RenderPassHandle::operator!=(
	const RenderPassHandle & other
) noexcept
{
	return render_pass_entry != other.render_pass_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VkRenderPass vk2d::vulkan::RenderPassHandle::GetVulkanRenderPass() const
{
	return render_pass_entry->GetVulkanRenderPass();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t vk2d::vulkan::RenderPassHandle::GetHash() const
{
	return render_pass_entry->GetHash();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::RenderPassHandle::Clear()
{
	DecrementReferenceCount();
	render_pass_manager			= {};
	render_pass_entry			= {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle::operator VkRenderPass() const
{
	return GetVulkanRenderPass();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::RenderPassHandle::operator bool() const
{
	return !!render_pass_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::RenderPassHandle::IncrementReferenceCount()
{
	if( render_pass_entry )
	{
		render_pass_manager->IncrementReferenceCount( render_pass_entry );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::RenderPassHandle::DecrementReferenceCount()
{
	if( render_pass_entry )
	{
		render_pass_manager->DecrementReferenceCount( render_pass_entry );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::RenderPassHandle::CopyOther(
	const RenderPassHandle & other
)
{
	if( other == *this ) return;

	DecrementReferenceCount();
	render_pass_manager			= other.render_pass_manager;
	render_pass_entry			= other.render_pass_entry;
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::RenderPassHandle::MoveOther(
	RenderPassHandle && other
) noexcept
{
	if( other == *this ) return;

	std::swap( render_pass_manager, other.render_pass_manager );
	std::swap( render_pass_entry, other.render_pass_entry );
}
