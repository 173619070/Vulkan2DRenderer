#pragma once

#include <core/SourceCommon.hpp>

#include "GraphicsPipelineInfo.hpp"
#include "ComputePipelineInfo.hpp"



namespace vk2d {

namespace vk2d_internal {
class InstanceImpl;
} // vk2d_internal

namespace vulkan {

class Device;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class PipelineManager
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineManager(
		vk2d_internal::InstanceImpl					&	instance,
		Device										&	vulkan_device
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineManager(
		const PipelineManager						&	other
	) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineManager(
		PipelineManager								&&	other
	) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~PipelineManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPipeline											FindPipeline(
		const vulkan::GraphicsPipelineInfo			&	graphics_pipeline_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPipeline											FindPipeline(
		const vulkan::ComputePipelineInfo			&	compute_pipeline_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPipeline											FindPipeline(
		size_t											hash
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief		Create graphics pipeline.
	///
	/// @warning	It is an error to create two or more pipelines with exactly the same pipeline info.
	///
	/// @note		Multithreading: Any thread.
	///
	/// @param[in]	graphics_pipeline_info
	///				Pipeline info which tells what kind of pipeline should be created.
	///
	/// @return		New graphics pipeline.
	VkPipeline											CreateGraphicsPipeline(
		const vulkan::GraphicsPipelineInfo			&	graphics_pipeline_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief		Create compute pipeline.
	///
	/// @warning	It is an error to create two or more pipelines with exactly the same pipeline info.
	///
	/// @note		Multithreading: Any thread.
	///
	/// @param[in]	compute_pipeline_info
	///				Pipeline info which tells what kind of pipeline should be created.
	///
	/// @return		New compute pipeline.
	VkPipeline											CreateComputePipeline(
		const vulkan::ComputePipelineInfo			&	compute_pipeline_info
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void												DestroyPipeline(
		VkPipeline										pipeline
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief		Get graphics pipeline cache.
	///
	///				Pipeline cache is used to speed up the creation of new pipelines.
	/// 
	/// @note		Multithreading: Any thread.
	///
	/// @return		Graphics pipeline cache.
	VkPipelineCache										GetGraphicsPipelineCache() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// @brief		Get compute pipeline cache.
	///
	///				Pipeline cache is used to speed up the creation of new pipelines.
	/// 
	/// @note		Multithreading: Any thread.
	///
	/// @return		Graphics pipeline cache.
	VkPipelineCache										GetComputePipelineCache() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool												IsGood();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool												CreateGraphicsPipelineCache();
	bool												CreateComputePipelineCache();

	void												DestroyGraphicsPipelineCache();
	void												DestroyComputePipelineCache();

	void												DestroyPipelines();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vk2d_internal::InstanceImpl						&	instance;
	Device											&	vulkan_device;

	std::map<size_t, VkPipeline>						pipeline_list;

	VkPipelineCache										vulkan_graphics_pipeline_cache				= {};
	VkPipelineCache										vulkan_compute_pipeline_cache				= {};

	bool												is_good										= {};
};



} // vulkan
} // vk2d
