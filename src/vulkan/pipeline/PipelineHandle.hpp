#pragma once

#include <core/SourceCommon.hpp>



namespace vk2d {
namespace vulkan {

class PipelineManager;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class PipelineHandle
{
	friend class PipelineManager;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineHandle(
		PipelineManager		*	pipeline_manager,
		VkPipeline				vulkan_pipeline,
		size_t					hash
	);

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineHandle() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineHandle(
		const PipelineHandle	&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineHandle(
		PipelineHandle			&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~PipelineHandle();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineHandle				&	operator=(
		nullptr_t
		);

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineHandle				&	operator=(
		const PipelineHandle	&	other
		);

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineHandle				&	operator=(
		PipelineHandle			&&	other
		) noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool							operator==(
		const PipelineHandle	&	other
		) noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool							operator!=(
		const PipelineHandle	&	other
		) noexcept;

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkPipeline						GetVulkanPipeline() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t							GetHash() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void							Clear();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	operator VkPipeline() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	operator bool() const;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void							IncrementReferenceCount();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void							DecrementReferenceCount();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void							CopyOther(
		const PipelineHandle	&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void							MoveOther(
		PipelineHandle			&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	PipelineManager				*	pipeline_manager			= {};
	VkPipeline						vulkan_pipeline				= {};

	size_t							hash						= {};
};



} // vulkan
} // vk2d
