
#include <core/SourceCommon.hpp>
#include "PipelineHandle.hpp"

#include <vulkan/pipeline/PipelineManager.hpp>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::PipelineHandle(
	PipelineManager	*	pipeline_manager,
	VkPipeline			vulkan_pipeline,
	size_t				hash
) :
	pipeline_manager( pipeline_manager ),
	vulkan_pipeline( vulkan_pipeline ),
	hash( hash )
{
	// Do not increment reference count in this constructor.
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::PipelineHandle(
	const PipelineHandle & other
)
{
	CopyOther( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::PipelineHandle(
	PipelineHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::~PipelineHandle()
{
	Clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle & vk2d::vulkan::PipelineHandle::operator=(
	nullptr_t
)
{
	Clear();
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle & vk2d::vulkan::PipelineHandle::operator=(
	const PipelineHandle & other
)
{
	CopyOther( other );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle & vk2d::vulkan::PipelineHandle::operator=(
	PipelineHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::PipelineHandle::operator==(
	const PipelineHandle & other
) noexcept
{
	return hash == other.hash;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::PipelineHandle::operator!=(
	const PipelineHandle & other
) noexcept
{
	return hash != other.hash;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VkPipeline vk2d::vulkan::PipelineHandle::GetVulkanPipeline() const
{
	return vulkan_pipeline;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t vk2d::vulkan::PipelineHandle::GetHash() const
{
	return hash;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::Clear()
{
	DecrementReferenceCount();
	pipeline_manager		= {};
	vulkan_pipeline			= {};
	hash					= {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::operator VkPipeline() const
{
	return GetVulkanPipeline();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::operator bool() const
{
	return !!vulkan_pipeline;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::IncrementReferenceCount()
{
	if( pipeline_manager )
	{
		pipeline_manager->IncrementReferenceCount( hash );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::DecrementReferenceCount()
{
	if( pipeline_manager )
	{
		pipeline_manager->DecrementReferenceCount( hash );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::CopyOther(
	const PipelineHandle & other
)
{
	if( other == *this ) return;

	DecrementReferenceCount();
	pipeline_manager		= other.pipeline_manager;
	vulkan_pipeline			= other.vulkan_pipeline;
	hash					= other.hash;
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::MoveOther(
	PipelineHandle && other
) noexcept
{
	if( other == *this ) return;

	std::swap( pipeline_manager, other.pipeline_manager );
	std::swap( vulkan_pipeline, other.vulkan_pipeline );
	std::swap( hash, other.hash );
}
