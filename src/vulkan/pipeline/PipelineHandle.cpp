
#include <core/SourceCommon.hpp>
#include "PipelineHandle.hpp"

#include <vulkan/pipeline/PipelineManager.hpp>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::PipelineHandle(
	PipelineManager					*	pipeline_manager,
	PipelineManagerPipelineEntry	*	pipeline_entry
) :
	pipeline_manager( pipeline_manager ),
	pipeline_entry( pipeline_entry )
{
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::PipelineHandle(
	const PipelineHandle & other
)
{
	CopyOther( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::PipelineHandle(
	PipelineHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::~PipelineHandle()
{
	Clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle & vk2d::vulkan::PipelineHandle::operator=(
	nullptr_t
)
{
	Clear();
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle & vk2d::vulkan::PipelineHandle::operator=(
	const PipelineHandle & other
)
{
	CopyOther( other );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle & vk2d::vulkan::PipelineHandle::operator=(
	PipelineHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::PipelineHandle::operator==(
	const PipelineHandle & other
) noexcept
{
	return pipeline_entry == other.pipeline_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::PipelineHandle::operator!=(
	const PipelineHandle & other
) noexcept
{
	return pipeline_entry != other.pipeline_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VkPipeline vk2d::vulkan::PipelineHandle::GetVulkanPipeline() const
{
	return pipeline_entry->GetVulkanPipeline();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t vk2d::vulkan::PipelineHandle::GetHash() const
{
	return pipeline_entry->GetHash();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::Clear()
{
	DecrementReferenceCount();
	pipeline_manager		= {};
	pipeline_entry			= {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::operator VkPipeline() const
{
	return GetVulkanPipeline();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::PipelineHandle::operator bool() const
{
	return !!pipeline_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::IncrementReferenceCount()
{
	if( pipeline_manager )
	{
		pipeline_manager->IncrementReferenceCount( pipeline_entry );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::DecrementReferenceCount()
{
	if( pipeline_manager )
	{
		pipeline_manager->DecrementReferenceCount( pipeline_entry );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::CopyOther(
	const PipelineHandle & other
)
{
	if( other == *this ) return;

	DecrementReferenceCount();
	pipeline_manager		= other.pipeline_manager;
	pipeline_entry			= other.pipeline_entry;
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::PipelineHandle::MoveOther(
	PipelineHandle && other
) noexcept
{
	if( other == *this ) return;

	std::swap( pipeline_manager, other.pipeline_manager );
	std::swap( pipeline_entry, other.pipeline_entry );
}
