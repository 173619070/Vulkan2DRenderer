
#include <core/SourceCommon.hpp>
#include "ShaderHandle.hpp"

#include <vulkan/shaders/ShaderManager.hpp>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::ShaderHandle(
	ShaderManager	*	shader_manager,
	VkShaderModule		vulkan_shader_module,
	size_t				hash
) :
	shader_manager( shader_manager ),
	vulkan_shader_module( vulkan_shader_module ),
	hash( hash )
{
	// Do not increment reference count in this constructor.
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::ShaderHandle(
	const ShaderHandle & other
)
{
	CopyOther( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::ShaderHandle(
	ShaderHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::~ShaderHandle()
{
	Clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle & vk2d::vulkan::ShaderHandle::operator=(
	nullptr_t
)
{
	Clear();
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle & vk2d::vulkan::ShaderHandle::operator=(
	const ShaderHandle & other
)
{
	CopyOther( other );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle & vk2d::vulkan::ShaderHandle::operator=(
	ShaderHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::ShaderHandle::operator==(
	const ShaderHandle & other
) noexcept
{
	return hash == other.hash;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::ShaderHandle::operator!=(
	const ShaderHandle & other
) noexcept
{
	return hash != other.hash;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VkShaderModule vk2d::vulkan::ShaderHandle::GetVulkanShaderModule() const
{
	return vulkan_shader_module;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t vk2d::vulkan::ShaderHandle::GetHash() const
{
	return hash;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::Clear()
{
	DecrementReferenceCount();
	shader_manager			= {};
	vulkan_shader_module	= {};
	hash					= {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::operator VkShaderModule() const
{
	return GetVulkanShaderModule();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::operator bool() const
{
	return !!vulkan_shader_module;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::IncrementReferenceCount()
{
	if( shader_manager )
	{
		shader_manager->IncrementReferenceCount( hash );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::DecrementReferenceCount()
{
	if( shader_manager )
	{
		shader_manager->DecrementReferenceCount( hash );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::CopyOther(
	const ShaderHandle & other
)
{
	if( other == *this ) return;

	DecrementReferenceCount();
	shader_manager			= other.shader_manager;
	vulkan_shader_module	= other.vulkan_shader_module;
	hash					= other.hash;
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::MoveOther(
	ShaderHandle && other
) noexcept
{
	if( other == *this ) return;

	std::swap( shader_manager, other.shader_manager );
	std::swap( vulkan_shader_module, other.vulkan_shader_module );
	std::swap( hash, other.hash );
}
