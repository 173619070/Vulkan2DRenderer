
#include <core/SourceCommon.hpp>
#include "ShaderHandle.hpp"

#include <vulkan/shaders/ShaderManager.hpp>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::ShaderHandle(
	ShaderManager				*	shader_manager,
	ShaderManagerShaderEntry	*	shader_entry
) :
	shader_manager( shader_manager ),
	shader_entry( shader_entry )
{
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::ShaderHandle(
	const ShaderHandle & other
)
{
	CopyOther( other );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::ShaderHandle(
	ShaderHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::~ShaderHandle()
{
	Clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle & vk2d::vulkan::ShaderHandle::operator=(
	nullptr_t
)
{
	Clear();
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle & vk2d::vulkan::ShaderHandle::operator=(
	const ShaderHandle & other
)
{
	CopyOther( other );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle & vk2d::vulkan::ShaderHandle::operator=(
	ShaderHandle && other
) noexcept
{
	MoveOther( std::move( other ) );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::ShaderHandle::operator==(
	const ShaderHandle & other
) noexcept
{
	return shader_entry == other.shader_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool vk2d::vulkan::ShaderHandle::operator!=(
	const ShaderHandle & other
) noexcept
{
	return shader_entry != other.shader_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VkShaderModule vk2d::vulkan::ShaderHandle::GetVulkanShaderModule() const
{
	return shader_entry->GetVulkanShaderModule();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t vk2d::vulkan::ShaderHandle::GetHash() const
{
	return shader_entry->GetHash();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::Clear()
{
	DecrementReferenceCount();
	shader_manager			= {};
	shader_entry			= {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::operator VkShaderModule() const
{
	return GetVulkanShaderModule();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vk2d::vulkan::ShaderHandle::operator bool() const
{
	return !!shader_entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::IncrementReferenceCount()
{
	if( shader_entry )
	{
		shader_manager->IncrementReferenceCount( shader_entry );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::DecrementReferenceCount()
{
	if( shader_entry )
	{
		shader_manager->DecrementReferenceCount( shader_entry );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::CopyOther(
	const ShaderHandle & other
)
{
	if( other == *this ) return;

	DecrementReferenceCount();
	shader_manager			= other.shader_manager;
	shader_entry			= other.shader_entry;
	IncrementReferenceCount();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void vk2d::vulkan::ShaderHandle::MoveOther(
	ShaderHandle && other
) noexcept
{
	if( other == *this ) return;

	std::swap( shader_manager, other.shader_manager );
	std::swap( shader_entry, other.shader_entry );
}
