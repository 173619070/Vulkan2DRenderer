#pragma once

#include <core/SourceCommon.hpp>



namespace vk2d {
namespace vulkan {

class ShaderManager;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderHandle
{
	friend class ShaderManager;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderHandle(
		ShaderManager		*	shader_manager,
		VkShaderModule			vulkan_shader_module,
		size_t					hash
	);

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderHandle() = default;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderHandle(
		const ShaderHandle	&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderHandle(
		ShaderHandle		&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~ShaderHandle();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderHandle			&	operator=(
		nullptr_t
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderHandle			&	operator=(
		const ShaderHandle	&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderHandle			&	operator=(
		ShaderHandle		&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool						operator==(
		const ShaderHandle	&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool						operator!=(
		const ShaderHandle	&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkShaderModule				GetVulkanShaderModule() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t						GetHash() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void						Clear();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	operator VkShaderModule() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	operator bool() const;

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void						IncrementReferenceCount();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void						DecrementReferenceCount();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void						CopyOther(
		const ShaderHandle	&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void						MoveOther(
		ShaderHandle		&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderManager			*	shader_manager				= {};
	VkShaderModule				vulkan_shader_module		= {};

	size_t						hash						= {};
};



} // vulkan
} // vk2d
