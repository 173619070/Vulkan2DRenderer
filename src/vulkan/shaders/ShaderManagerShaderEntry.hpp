#pragma once

#include <core/SourceCommon.hpp>

#include <types/Synchronization.hpp>



namespace vk2d {
namespace vulkan {



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ShaderManagerShaderEntry
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderManagerShaderEntry(
		VkShaderModule								vulkan_shader_module,
		size_t										hash
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderManagerShaderEntry(
		const ShaderManagerShaderEntry			&	other
	) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderManagerShaderEntry(
		ShaderManagerShaderEntry				&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~ShaderManagerShaderEntry();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderManagerShaderEntry					&	operator=(
		const ShaderManagerShaderEntry			&	other
	) = delete;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ShaderManagerShaderEntry					&	operator=(
		ShaderManagerShaderEntry				&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool											operator==(
		const ShaderManagerShaderEntry			&	other
	);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkShaderModule									GetVulkanShaderModule();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t											GetHash();

private:

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void											MoveOther(
		ShaderManagerShaderEntry				&&	other
	) noexcept;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	VkShaderModule									vulkan_shader_module	= {};
	size_t											hash					= {};

public:
	MutexObject<size_t>								reference_count;
};



} // vulkan
} // vk2d
