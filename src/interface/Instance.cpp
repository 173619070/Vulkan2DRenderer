
#include <core/SourceCommon.hpp>

#include "InstanceImpl.hpp"



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Instance::Instance(
	const vk2d::InstanceCreateInfo			&	instance_create_info
)
{
	impl = std::make_unique<vk2d_internal::InstanceImpl>(
		*this,
		instance_create_info
	);
	if( !impl || !impl->IsGood() ) {
		impl = nullptr;
		if( instance_create_info.report_function ) {
			instance_create_info.report_function( ReportSeverity::CRITICAL_ERROR, "Cannot create instance implementation!" );
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Instance::~Instance()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API bool vk2d::Instance::Run()
{
	return impl->Run();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::ResourceManager * vk2d::Instance::GetResourceManager()
{
	return impl->GetResourceManager();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API std::vector<vk2d::Monitor*> vk2d::Instance::GetMonitors()
{
	return impl->GetMonitors();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor *vk2d::Instance::GetPrimaryMonitor()
{
	return impl->GetPrimaryMonitor();
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Instance::SetMonitorUpdateCallback(
	vk2d::PFN_MonitorUpdateCallback			monitor_update_callback_funtion
)
{
	impl->SetMonitorUpdateCallback(
		monitor_update_callback_funtion
	);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Cursor * vk2d::Instance::CreateCursor(
	const std::filesystem::path			&	image_path,
	glm::ivec2								hot_spot
)
{
	return impl->CreateCursor(
		image_path,
		hot_spot
	);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Cursor * vk2d::Instance::CreateCursor(
	glm::uvec2								image_size,
	const std::vector<Color8>			&	image_data,
	glm::ivec2								hot_spot
)
{
	return impl->CreateCursor(
		image_size,
		image_data,
		hot_spot
	);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Instance::DestroyCursor(
	Cursor						*	cursor )
{
	impl->DestroyCursor( cursor );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::PFN_GamepadConnectionEventCallback vk2d::Instance::GetGamepadEventCallback() const
{
	return impl->GetGamepadEventCallback();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Instance::SetGamepadEventCallback(
	PFN_GamepadConnectionEventCallback		gamepad_event_callback_function
)
{
	impl->SetGamepadEventCallback( gamepad_event_callback_function );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API bool vk2d::Instance::IsGamepadPresent(
	Gamepad			gamepad
)
{
	return impl->IsGamepadPresent( gamepad );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API std::string vk2d::Instance::GetGamepadName(
	Gamepad		gamepad
)
{
	return impl->GetGamepadName( gamepad );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::GamepadState vk2d::Instance::QueryGamepadState(
	Gamepad		gamepad
)
{
	return impl->QueryGamepadState( gamepad );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Window * vk2d::Instance::CreateOutputWindow(
	const WindowCreateInfo		&	window_create_info
)
{
	return impl->CreateOutputWindow( window_create_info );
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Instance::DestroyOutputWindow(
	Window				*	window
)
{
	impl->DestroyOutputWindow( window );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::RenderTargetTexture * vk2d::Instance::CreateRenderTargetTexture(
	const RenderTargetTextureCreateInfo	&	render_target_texture_create_info
)
{
	return impl->CreateRenderTargetTexture( render_target_texture_create_info );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Instance::DestroyRenderTargetTexture(
	RenderTargetTexture					*	render_target_texture
)
{
	impl->DestroyRenderTargetTexture( render_target_texture );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Sampler * vk2d::Instance::CreateSampler(
	const SamplerCreateInfo		&	sampler_create_info
)
{
	return impl->CreateSampler( sampler_create_info );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Instance::DestroySampler(
	Sampler						*	sampler
)
{
	impl->DestroySampler( sampler );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Multisamples vk2d::Instance::GetMaximumSupportedMultisampling()
{
	return impl->GetMaximumSupportedMultisampling();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Multisamples vk2d::Instance::GetAllSupportedMultisampling()
{
	return impl->GetAllSupportedMultisampling();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API bool vk2d::Instance::IsGood() const
{
	return !!impl;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API std::unique_ptr<vk2d::Instance> vk2d::CreateInstance(
	const vk2d::InstanceCreateInfo		&	instance_create_info
)
{
	auto instance = std::unique_ptr<Instance>( new Instance( instance_create_info ) );

	if( instance->impl->IsGood() ) {
		return instance;
	}
	return {};
}
