
#include <core/SourceCommon.h>

#include "MonitorImpl.hpp"



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor::Monitor(
	std::unique_ptr<vk2d_internal::MonitorImpl>	&&	preconstructed_impl
)
{
	impl = std::move( preconstructed_impl );
	if( !impl || !impl->IsGood() )
	{
		impl = nullptr;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor::Monitor()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor::Monitor(
	const Monitor			&	other
)
{
	impl = std::make_unique<vk2d_internal::MonitorImpl>(
		other.impl->monitor,
		other.impl->position,
		other.impl->physical_size,
		other.impl->name,
		other.impl->current_video_mode,
		other.impl->video_modes
	);
	if( !impl || !impl->IsGood() )
	{
		impl = nullptr;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor::Monitor(
	Monitor && other
)
{
	std::swap( impl, other.impl );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor::~Monitor()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::MonitorVideoMode vk2d::Monitor::GetCurrentVideoMode() const
{
	return impl->GetCurrentVideoMode();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API std::vector<vk2d::MonitorVideoMode>vk2d::Monitor::GetVideoModes() const
{
	return impl->GetVideoModes();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Monitor::SetGamma(
	float		gamma
)
{
	impl->SetGamma( gamma );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API std::vector<vk2d::GammaRampNode> vk2d::Monitor::GetGammaRamp()
{
	return impl->GetGammaRamp();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API void vk2d::Monitor::SetGammaRamp(
	std::span<const GammaRampNode> ramp
)
{
	impl->SetGammaRamp( ramp );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor & vk2d::Monitor::operator=(
	const Monitor		&	other
	)
{
	impl = std::make_unique<vk2d_internal::MonitorImpl>(
		other.impl->monitor,
		other.impl->position,
		other.impl->physical_size,
		other.impl->name,
		other.impl->current_video_mode,
		other.impl->video_modes
	);
	if( !impl || !impl->IsGood() )
	{
		impl = nullptr;
	}

	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API vk2d::Monitor &vk2d::Monitor::operator=(
	Monitor	&&	other
	)
{
	std::swap( impl, other.impl );
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
VK2D_API bool vk2d::Monitor::IsGood() const
{
	return !!impl;
}
